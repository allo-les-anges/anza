import { GoogleGenAI } from "@google/genai";
import { AspectRatio } from '../types';

// FIX: Removed duplicate global declaration for `window.aistudio`. The error message
// "Subsequent property declarations must have the same type" indicates this is
// already defined elsewhere in the project, and this re-declaration was causing
// a conflict.
const fileToBase64 = (file: File): Promise<string> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result as string;
      resolve(result.split(',')[1]); 
    };
    reader.onerror = (error) => reject(error);
  });
};


export const generateVideo = async (
    imageFile: File,
    prompt: string,
    aspectRatio: AspectRatio
): Promise<string> => {
    
    // Create a new instance every time to get the latest key
    const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
    
    const base64Image = await fileToBase64(imageFile);

    let operation = await ai.models.generateVideos({
        model: 'veo-3.1-fast-generate-preview',
        prompt: prompt,
        image: {
            imageBytes: base64Image,
            mimeType: imageFile.type,
        },
        config: {
            numberOfVideos: 1,
            resolution: '720p',
            aspectRatio: aspectRatio
        }
    });

    while (!operation.done) {
        await new Promise(resolve => setTimeout(resolve, 10000));
        operation = await ai.operations.getVideosOperation({ operation: operation });
    }

    if (operation.error) {
        throw new Error(`Video generation failed: ${operation.error.message}`);
    }

    const downloadLink = operation.response?.generatedVideos?.[0]?.video?.uri;
    if (!downloadLink) {
        throw new Error("Video generation succeeded but no download link was provided.");
    }
    
    const videoResponse = await fetch(`${downloadLink}&key=${process.env.API_KEY}`);
    if (!videoResponse.ok) {
        throw new Error(`Failed to download video: ${videoResponse.statusText}`);
    }
    
    const videoBlob = await videoResponse.blob();
    return URL.createObjectURL(videoBlob);
};
